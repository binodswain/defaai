import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { loginUserAPI, signupUserAPI } from "./authAPI";

const initialState = {
    login: {
        loading: false,
        errorMessage: null,
    },
    signup: {
        loading: false,
        errorMessage: null,
        successMessage: null,
    },
    user: null,
};

export const loginAsync = createAsyncThunk("auth/login", async (data) => {
    const response = await loginUserAPI(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
});

export const signupAsync = createAsyncThunk("auth/signup", async (data) => {
    const response = await signupUserAPI(data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
});

export const authSlice = createSlice({
    name: "auth",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        clearSignupModule: (state) => {
            state.signup.loading = false;
            state.signup.errorMessage = null;
            state.signup.successMessage = null;
        },
        clearLoginModule: (state) => {
            state.login.loading = false;
            state.login.errorMessage = null;
        },
        logout: (state) => {
            state.user = null;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginAsync.pending, (state) => {
                state.login.loading = true;
            })
            .addCase(loginAsync.fulfilled, (state, action) => {
                state.login.loading = false;
                state.login.errorMessage = null;
                state.user = {
                    fname: "binod",
                    lname: "swain",
                    email: "me@example.com",
                    // access token
                    ...action.payload,
                };
            })
            .addCase(signupAsync.pending, (state) => {
                state.signup.loading = true;
            })
            .addCase(signupAsync.fulfilled, (state, action) => {
                state.signup.loading = false;
            });
    },
});

export const { clearLoginModule, clearSignupModule, logout } =
    authSlice.actions;

export const getLoginModule = (state) => state.auth.login;
export const getSignupModule = (state) => state.auth.signup;
export const getAuthModule = (state) => state.auth;

export default authSlice.reducer;
