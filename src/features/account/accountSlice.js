import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
    getAccountDetailsAPI,
    getBillingDetailsAPI,
    saveAccountDetails,
    updatePlanDetails,
} from "./accountAPI";

const initialState = {
    isLoading: false,
    profile: null,
    billing: null,
    plan: null,
};

export const fetchAccountAsync = createAsyncThunk(
    "account/fetchAccount",
    async (payload, thunkAPI) => {
        const response = await getAccountDetailsAPI();
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const fetchBillingAsync = createAsyncThunk(
    "account/fetchBilling",
    async (payload, thunkAPI) => {
        const response = await getBillingDetailsAPI();
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const updateAccountAsync = createAsyncThunk(
    "account/updateAccount",
    async (payload, thunkAPI) => {
        const response = await saveAccountDetails(payload);
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const updatePlanAsync = createAsyncThunk(
    "account/updatePlan",
    async (payload, thunkAPI) => {
        const response = await updatePlanDetails(payload);
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const accountSlice = createSlice({
    name: "account",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchAccountAsync.pending, (state, action) => {
                state.isLoading = true;
            })
            .addCase(fetchAccountAsync.fulfilled, (state, action) => {
                const { plan, profile } = action.payload;
                state.isLoading = false;
                state.plan = plan;
                state.profile = profile;
            });
        builder
            .addCase(fetchBillingAsync.pending, (state, action) => {
                state.isLoading = true;
            })
            .addCase(fetchBillingAsync.fulfilled, (state, action) => {
                state.isLoading = false;
                state.billing = action.payload;
            });
        builder
            .addCase(updateAccountAsync.pending, (state, action) => {
                state.isLoading = true;
            })
            .addCase(updateAccountAsync.fulfilled, (state, action) => {
                state.isLoading = false;
                state.profile = {
                    ...state.profile,
                    ...action.payload,
                };
            });
        builder
            .addCase(updatePlanAsync.pending, (state, action) => {
                state.isLoading = true;
            })
            .addCase(updatePlanAsync.fulfilled, (state, action) => {
                state.isLoading = false;
                state.plan = action.payload;
            });
    },
});

export const {} = accountSlice.actions;

export const getAccountModule = (state) => state.account;

export default accountSlice.reducer;
